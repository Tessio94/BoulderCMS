/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_events_category_gender = pgEnum(
  "enum_events_category_gender",
  ["male", "female"],
);
export const enum_gyms_working_hours_days = pgEnum(
  "enum_gyms_working_hours_days",
  ["mon", "tue", "wed", "thu", "fri", "sat", "sun"],
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const events_category = pgTable(
  "events_category",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    ageFrom: numeric("age_from"),
    ageTo: numeric("age_to"),
    gender: enum_events_category_gender("gender"),
  },
  (columns) => ({
    _orderIdx: index("events_category_order_idx").on(columns._order),
    _parentIDIdx: index("events_category_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [events.id],
      name: "events_category_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const events = pgTable(
  "events",
  {
    id: serial("id").primaryKey(),
    _order: varchar("_order"),
    title: varchar("title").notNull(),
    from: timestamp("from", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    until: timestamp("until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    description: varchar("description"),
    gym: integer("gym_id")
      .notNull()
      .references(() => gyms.id, {
        onDelete: "set null",
      }),
    location: varchar("location"),
    heroImage: integer("hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    content: jsonb("content").notNull(),
    cardImage: integer("card_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    timeframe_start: timestamp("timeframe_start", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    timeframe_end: timestamp("timeframe_end", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    registration_start: timestamp("registration_start", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    registration_end: timestamp("registration_end", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    events__order_idx: index("events__order_idx").on(columns._order),
    events_gym_idx: index("events_gym_idx").on(columns.gym),
    events_hero_image_idx: index("events_hero_image_idx").on(columns.heroImage),
    events_card_image_idx: index("events_card_image_idx").on(columns.cardImage),
    events_slug_idx: uniqueIndex("events_slug_idx").on(columns.slug),
    events_updated_at_idx: index("events_updated_at_idx").on(columns.updatedAt),
    events_created_at_idx: index("events_created_at_idx").on(columns.createdAt),
  }),
);

export const events_rels = pgTable(
  "events_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("events_rels_order_idx").on(columns.order),
    parentIdx: index("events_rels_parent_idx").on(columns.parent),
    pathIdx: index("events_rels_path_idx").on(columns.path),
    events_rels_media_id_idx: index("events_rels_media_id_idx").on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [events.id],
      name: "events_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "events_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const gyms_working_hours_days = pgTable(
  "gyms_working_hours_days",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_gyms_working_hours_days("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("gyms_working_hours_days_order_idx").on(columns.order),
    parentIdx: index("gyms_working_hours_days_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [gyms_working_hours.id],
      name: "gyms_working_hours_days_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const gyms_working_hours = pgTable(
  "gyms_working_hours",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    from: numeric("from").notNull(),
    to: numeric("to").notNull(),
  },
  (columns) => ({
    _orderIdx: index("gyms_working_hours_order_idx").on(columns._order),
    _parentIDIdx: index("gyms_working_hours_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [gyms.id],
      name: "gyms_working_hours_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const gyms = pgTable(
  "gyms",
  {
    id: serial("id").primaryKey(),
    _order: varchar("_order"),
    name: varchar("name").notNull(),
    heroImage: integer("hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    location: varchar("location").notNull(),
    phone: varchar("phone"),
    email: varchar("email"),
    website: varchar("website"),
    information: varchar("information").notNull(),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gyms__order_idx: index("gyms__order_idx").on(columns._order),
    gyms_hero_image_idx: index("gyms_hero_image_idx").on(columns.heroImage),
    gyms_slug_idx: uniqueIndex("gyms_slug_idx").on(columns.slug),
    gyms_updated_at_idx: index("gyms_updated_at_idx").on(columns.updatedAt),
    gyms_created_at_idx: index("gyms_created_at_idx").on(columns.createdAt),
  }),
);

export const gyms_rels = pgTable(
  "gyms_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("gyms_rels_order_idx").on(columns.order),
    parentIdx: index("gyms_rels_parent_idx").on(columns.parent),
    pathIdx: index("gyms_rels_path_idx").on(columns.path),
    gyms_rels_media_id_idx: index("gyms_rels_media_id_idx").on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [gyms.id],
      name: "gyms_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "gyms_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const members = pgTable(
  "members",
  {
    id: serial("id").primaryKey(),
    firstName: varchar("first_name").notNull(),
    lastName: varchar("last_name").notNull(),
    userName: varchar("user_name").notNull(),
    phoneNumber: varchar("phone_number"),
    termsAcceptedAt: timestamp("terms_accepted_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    fullName: varchar("full_name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    members_updated_at_idx: index("members_updated_at_idx").on(
      columns.updatedAt,
    ),
    members_created_at_idx: index("members_created_at_idx").on(
      columns.createdAt,
    ),
    members_email_idx: uniqueIndex("members_email_idx").on(columns.email),
  }),
);

export const members_rels = pgTable(
  "members_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    "event-registrationsID": integer("event_registrations_id"),
  },
  (columns) => ({
    order: index("members_rels_order_idx").on(columns.order),
    parentIdx: index("members_rels_parent_idx").on(columns.parent),
    pathIdx: index("members_rels_path_idx").on(columns.path),
    members_rels_event_registrations_id_idx: index(
      "members_rels_event_registrations_id_idx",
    ).on(columns["event-registrationsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [members.id],
      name: "members_rels_parent_fk",
    }).onDelete("cascade"),
    "event-registrationsIdFk": foreignKey({
      columns: [columns["event-registrationsID"]],
      foreignColumns: [event_registrations.id],
      name: "members_rels_event_registrations_fk",
    }).onDelete("cascade"),
  }),
);

export const results = pgTable(
  "results",
  {
    id: serial("id").primaryKey(),
    member: integer("member_id")
      .notNull()
      .references(() => members.id, {
        onDelete: "set null",
      }),
    event: integer("event_id")
      .notNull()
      .references(() => events.id, {
        onDelete: "set null",
      }),
    stage: integer("stage_id")
      .notNull()
      .references(() => stages.id, {
        onDelete: "set null",
      }),
    points: numeric("points").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    results_member_idx: index("results_member_idx").on(columns.member),
    results_event_idx: index("results_event_idx").on(columns.event),
    results_stage_idx: index("results_stage_idx").on(columns.stage),
    results_updated_at_idx: index("results_updated_at_idx").on(
      columns.updatedAt,
    ),
    results_created_at_idx: index("results_created_at_idx").on(
      columns.createdAt,
    ),
    member_event_stage_idx: uniqueIndex("member_event_stage_idx").on(
      columns.member,
      columns.event,
      columns.stage,
    ),
  }),
);

export const stages_goals = pgTable(
  "stages_goals",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    baseScore: numeric("base_score").notNull(),
    coefficient: numeric("coefficient").default("1"),
  },
  (columns) => ({
    _orderIdx: index("stages_goals_order_idx").on(columns._order),
    _parentIDIdx: index("stages_goals_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [stages.id],
      name: "stages_goals_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const stages = pgTable(
  "stages",
  {
    id: serial("id").primaryKey(),
    event: integer("event_id")
      .notNull()
      .references(() => events.id, {
        onDelete: "set null",
      }),
    name: varchar("name").notNull(),
    location: varchar("location"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    stages_event_idx: index("stages_event_idx").on(columns.event),
    stages_image_idx: index("stages_image_idx").on(columns.image),
    stages_updated_at_idx: index("stages_updated_at_idx").on(columns.updatedAt),
    stages_created_at_idx: index("stages_created_at_idx").on(columns.createdAt),
  }),
);

export const event_registrations = pgTable(
  "event_registrations",
  {
    id: serial("id").primaryKey(),
    event: integer("event_id")
      .notNull()
      .references(() => events.id, {
        onDelete: "set null",
      }),
    member: integer("member_id")
      .notNull()
      .references(() => members.id, {
        onDelete: "set null",
      }),
    order: numeric("order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    event_registrations_event_idx: index("event_registrations_event_idx").on(
      columns.event,
    ),
    event_registrations_member_idx: index("event_registrations_member_idx").on(
      columns.member,
    ),
    event_registrations_updated_at_idx: index(
      "event_registrations_updated_at_idx",
    ).on(columns.updatedAt),
    event_registrations_created_at_idx: index(
      "event_registrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    eventsID: integer("events_id"),
    gymsID: integer("gyms_id"),
    membersID: integer("members_id"),
    resultsID: integer("results_id"),
    stagesID: integer("stages_id"),
    "event-registrationsID": integer("event_registrations_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_events_id_idx: index(
      "payload_locked_documents_rels_events_id_idx",
    ).on(columns.eventsID),
    payload_locked_documents_rels_gyms_id_idx: index(
      "payload_locked_documents_rels_gyms_id_idx",
    ).on(columns.gymsID),
    payload_locked_documents_rels_members_id_idx: index(
      "payload_locked_documents_rels_members_id_idx",
    ).on(columns.membersID),
    payload_locked_documents_rels_results_id_idx: index(
      "payload_locked_documents_rels_results_id_idx",
    ).on(columns.resultsID),
    payload_locked_documents_rels_stages_id_idx: index(
      "payload_locked_documents_rels_stages_id_idx",
    ).on(columns.stagesID),
    payload_locked_documents_rels_event_registrations_id_idx: index(
      "payload_locked_documents_rels_event_registrations_id_idx",
    ).on(columns["event-registrationsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    eventsIdFk: foreignKey({
      columns: [columns["eventsID"]],
      foreignColumns: [events.id],
      name: "payload_locked_documents_rels_events_fk",
    }).onDelete("cascade"),
    gymsIdFk: foreignKey({
      columns: [columns["gymsID"]],
      foreignColumns: [gyms.id],
      name: "payload_locked_documents_rels_gyms_fk",
    }).onDelete("cascade"),
    membersIdFk: foreignKey({
      columns: [columns["membersID"]],
      foreignColumns: [members.id],
      name: "payload_locked_documents_rels_members_fk",
    }).onDelete("cascade"),
    resultsIdFk: foreignKey({
      columns: [columns["resultsID"]],
      foreignColumns: [results.id],
      name: "payload_locked_documents_rels_results_fk",
    }).onDelete("cascade"),
    stagesIdFk: foreignKey({
      columns: [columns["stagesID"]],
      foreignColumns: [stages.id],
      name: "payload_locked_documents_rels_stages_fk",
    }).onDelete("cascade"),
    "event-registrationsIdFk": foreignKey({
      columns: [columns["event-registrationsID"]],
      foreignColumns: [event_registrations.id],
      name: "payload_locked_documents_rels_event_registrations_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    membersID: integer("members_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    payload_preferences_rels_members_id_idx: index(
      "payload_preferences_rels_members_id_idx",
    ).on(columns.membersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
    membersIdFk: foreignKey({
      columns: [columns["membersID"]],
      foreignColumns: [members.id],
      name: "payload_preferences_rels_members_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_events_category = relations(
  events_category,
  ({ one }) => ({
    _parentID: one(events, {
      fields: [events_category._parentID],
      references: [events.id],
      relationName: "category",
    }),
  }),
);
export const relations_events_rels = relations(events_rels, ({ one }) => ({
  parent: one(events, {
    fields: [events_rels.parent],
    references: [events.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [events_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_events = relations(events, ({ one, many }) => ({
  gym: one(gyms, {
    fields: [events.gym],
    references: [gyms.id],
    relationName: "gym",
  }),
  heroImage: one(media, {
    fields: [events.heroImage],
    references: [media.id],
    relationName: "heroImage",
  }),
  cardImage: one(media, {
    fields: [events.cardImage],
    references: [media.id],
    relationName: "cardImage",
  }),
  category: many(events_category, {
    relationName: "category",
  }),
  _rels: many(events_rels, {
    relationName: "_rels",
  }),
}));
export const relations_gyms_working_hours_days = relations(
  gyms_working_hours_days,
  ({ one }) => ({
    parent: one(gyms_working_hours, {
      fields: [gyms_working_hours_days.parent],
      references: [gyms_working_hours.id],
      relationName: "days",
    }),
  }),
);
export const relations_gyms_working_hours = relations(
  gyms_working_hours,
  ({ one, many }) => ({
    _parentID: one(gyms, {
      fields: [gyms_working_hours._parentID],
      references: [gyms.id],
      relationName: "workingHours",
    }),
    days: many(gyms_working_hours_days, {
      relationName: "days",
    }),
  }),
);
export const relations_gyms_rels = relations(gyms_rels, ({ one }) => ({
  parent: one(gyms, {
    fields: [gyms_rels.parent],
    references: [gyms.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [gyms_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_gyms = relations(gyms, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [gyms.heroImage],
    references: [media.id],
    relationName: "heroImage",
  }),
  workingHours: many(gyms_working_hours, {
    relationName: "workingHours",
  }),
  _rels: many(gyms_rels, {
    relationName: "_rels",
  }),
}));
export const relations_members_rels = relations(members_rels, ({ one }) => ({
  parent: one(members, {
    fields: [members_rels.parent],
    references: [members.id],
    relationName: "_rels",
  }),
  "event-registrationsID": one(event_registrations, {
    fields: [members_rels["event-registrationsID"]],
    references: [event_registrations.id],
    relationName: "event-registrations",
  }),
}));
export const relations_members = relations(members, ({ many }) => ({
  _rels: many(members_rels, {
    relationName: "_rels",
  }),
}));
export const relations_results = relations(results, ({ one }) => ({
  member: one(members, {
    fields: [results.member],
    references: [members.id],
    relationName: "member",
  }),
  event: one(events, {
    fields: [results.event],
    references: [events.id],
    relationName: "event",
  }),
  stage: one(stages, {
    fields: [results.stage],
    references: [stages.id],
    relationName: "stage",
  }),
}));
export const relations_stages_goals = relations(stages_goals, ({ one }) => ({
  _parentID: one(stages, {
    fields: [stages_goals._parentID],
    references: [stages.id],
    relationName: "goals",
  }),
}));
export const relations_stages = relations(stages, ({ one, many }) => ({
  event: one(events, {
    fields: [stages.event],
    references: [events.id],
    relationName: "event",
  }),
  image: one(media, {
    fields: [stages.image],
    references: [media.id],
    relationName: "image",
  }),
  goals: many(stages_goals, {
    relationName: "goals",
  }),
}));
export const relations_event_registrations = relations(
  event_registrations,
  ({ one }) => ({
    event: one(events, {
      fields: [event_registrations.event],
      references: [events.id],
      relationName: "event",
    }),
    member: one(members, {
      fields: [event_registrations.member],
      references: [members.id],
      relationName: "member",
    }),
  }),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: "events",
    }),
    gymsID: one(gyms, {
      fields: [payload_locked_documents_rels.gymsID],
      references: [gyms.id],
      relationName: "gyms",
    }),
    membersID: one(members, {
      fields: [payload_locked_documents_rels.membersID],
      references: [members.id],
      relationName: "members",
    }),
    resultsID: one(results, {
      fields: [payload_locked_documents_rels.resultsID],
      references: [results.id],
      relationName: "results",
    }),
    stagesID: one(stages, {
      fields: [payload_locked_documents_rels.stagesID],
      references: [stages.id],
      relationName: "stages",
    }),
    "event-registrationsID": one(event_registrations, {
      fields: [payload_locked_documents_rels["event-registrationsID"]],
      references: [event_registrations.id],
      relationName: "event-registrations",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    membersID: one(members, {
      fields: [payload_preferences_rels.membersID],
      references: [members.id],
      relationName: "members",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_events_category_gender: typeof enum_events_category_gender;
  enum_gyms_working_hours_days: typeof enum_gyms_working_hours_days;
  users: typeof users;
  media: typeof media;
  events_category: typeof events_category;
  events: typeof events;
  events_rels: typeof events_rels;
  gyms_working_hours_days: typeof gyms_working_hours_days;
  gyms_working_hours: typeof gyms_working_hours;
  gyms: typeof gyms;
  gyms_rels: typeof gyms_rels;
  members: typeof members;
  members_rels: typeof members_rels;
  results: typeof results;
  stages_goals: typeof stages_goals;
  stages: typeof stages;
  event_registrations: typeof event_registrations;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_events_category: typeof relations_events_category;
  relations_events_rels: typeof relations_events_rels;
  relations_events: typeof relations_events;
  relations_gyms_working_hours_days: typeof relations_gyms_working_hours_days;
  relations_gyms_working_hours: typeof relations_gyms_working_hours;
  relations_gyms_rels: typeof relations_gyms_rels;
  relations_gyms: typeof relations_gyms;
  relations_members_rels: typeof relations_members_rels;
  relations_members: typeof relations_members;
  relations_results: typeof relations_results;
  relations_stages_goals: typeof relations_stages_goals;
  relations_stages: typeof relations_stages;
  relations_event_registrations: typeof relations_event_registrations;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
